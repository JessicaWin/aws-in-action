service: aws-fargate-example-ecs

provider:
  name: aws
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'develop'}
  stackName: ${self:provider.stage}-${self:service}
  deploymentBucket:
    name: com.jessica.${self:provider.stage}-deploy-bucket
    serverSideEncryption: AES256
resources:
  Parameters:
    ServiceName:
      Type: String
      Default: aws-fargate-example
    ContainerPort:
      Type: Number
      Default: 3000
    LoadBalancerPort:
      Type: Number
      Default: 80
    HealthCheckPath:
      Type: String
      Default: /health/check
    # for autoscaling
    MinCapacity:
      Type: Number
      Default: 3
    # for autoscaling
    MaxCapacity:
      Type: Number
      Default: 6
    DesiredCount:
      Type: Number
      Default: 3
    # target CPU utilization (%)
    AutoScalingTargetValue:
      Type: Number
      Default: 50
    VPCName:
      Type: String
      Default: aws-fargate-example-vpc

  Resources:
    LogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, task]]
    NestjsFargateCluster:
      Type: 'AWS::ECS::Cluster'
      Properties:
        ClusterName: !Join ['-', [!Ref ServiceName, cluster]]
        CapacityProviders:
          - FARGATE
          - FARGATE_SPOT
        DefaultCapacityProviderStrategy:
          - CapacityProvider: FARGATE
            Weight: 1
          - CapacityProvider: FARGATE_SPOT
            Weight: 1
        Configuration:
          ExecuteCommandConfiguration:
            Logging: DEFAULT
        ClusterSettings:
          - Name: containerInsights
            Value: enabled
    NestjsFargateTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      # Makes sure the log group is created before it is used.
      DependsOn: LogGroup
      Properties:
        # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
        Family: !Join ['-', [!Ref ServiceName, task-definition]]
        # awsvpc is required for Fargate
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        Cpu: 256
        # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
        Memory: 512
        # A role needed by ECS.
        # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
        # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
        ExecutionRoleArn:
          Fn::ImportValue: ${self:provider.stage}-ECSExecuteRole
        # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
        TaskRoleArn:
          Fn::ImportValue: ${self:provider.stage}-ECSTaskRole
        ContainerDefinitions:
          - Name: !Ref ServiceName
            Image: !Sub ${AWS::AccountId}.dkr.ecr.${self:provider.region}.amazonaws.com/aws-fargate-example:latest
            PortMappings:
              - ContainerPort: !Ref ContainerPort
            # Send logs to CloudWatch Logs
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: ${self:provider.region}
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: ecs
    NestjsFargateService:
      Type: AWS::ECS::Service
      DependsOn:
        - ListenerHTTP
      Properties:
        ServiceName: !Ref ServiceName
        Cluster: !Ref NestjsFargateCluster
        TaskDefinition: !Ref NestjsFargateTaskDefinition
        DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
        DesiredCount: !Ref DesiredCount
        # This may need to be adjusted if the container takes a while to start up
        HealthCheckGracePeriodSeconds: 30
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            # change to DISABLED if you're using private subnets that have access to a NAT gateway
            AssignPublicIp: DISABLED
            Subnets:
              Fn::Split:
                - ','
                - Fn::ImportValue: !Sub ${self:provider.stage}-${VPCName}-PrivateSubnets
            SecurityGroups:
              - Fn::ImportValue: !Sub ${self:provider.stage}-${VPCName}-PrivateSecurityGroup
        LoadBalancers:
          - ContainerName: !Ref ServiceName
            ContainerPort: !Ref ContainerPort
            TargetGroupArn: !Ref TargetGroup
    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        # will look for a 200 status code by default unless specified otherwise
        HealthCheckPath: !Ref HealthCheckPath
        HealthCheckTimeoutSeconds: 5
        UnhealthyThresholdCount: 2
        HealthyThresholdCount: 2
        Name: !Join ['-', [!Ref ServiceName, target-group]]
        Port: !Ref ContainerPort
        Protocol: HTTP
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 60 # default is 300
        TargetType: ip
        VpcId:
          Fn::ImportValue: !Sub ${self:provider.stage}-${VPCName}
    ListenerHTTP:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TargetGroup
            Type: forward
        LoadBalancerArn: !Ref LoadBalancer
        Port: !Ref LoadBalancerPort
        Protocol: HTTP
        # Certificates:
        #   - CertificateArn: !Ref Certificate
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        LoadBalancerAttributes:
          # this is the default, but is specified here in case it needs to be changed
          - Key: idle_timeout.timeout_seconds
            Value: 60
        Name: !Join ['-', [!Ref ServiceName, balancer]]
        # "internal" is also an option
        Scheme: internet-facing
        SecurityGroups:
          - Fn::ImportValue: !Sub ${self:provider.stage}-${VPCName}-PublicSecurityGroup
        Subnets:
          Fn::Split:
            - ','
            - Fn::ImportValue: !Sub ${self:provider.stage}-${VPCName}-PublicSubnets

    NestjsFargateAutoScalingTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MinCapacity: !Ref MinCapacity
        MaxCapacity: !Ref MaxCapacity
        ResourceId:
          !Join [
            '/',
            [
              service,
              !Ref NestjsFargateCluster,
              !GetAtt NestjsFargateService.Name,
            ],
          ]
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
        # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
        RoleARN:
          Fn::ImportValue: ${self:provider.stage}-ECSAutoScalingRole
    NestjsFargateAutoScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ${self:provider.stage}-NestjsFargateAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref NestjsFargateAutoScalingTarget
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization
          ScaleInCooldown: 10
          ScaleOutCooldown: 10
          # Keep things at or lower than 50% CPU utilization, for example
          TargetValue: !Ref AutoScalingTargetValue
